#
# {{ ansible_managed }}
#

# This is the ssh client system-wide configuration file.  See
# ssh_config(5) for more information.  This file provides defaults for
# users, and the values can be changed in per-user configuration files
# or on the command line.

# Configuration data is parsed as follows:
#  1. command line options
#  2. user-specific file
#  3. system-wide file
# Any configuration value is only changed the first time it is set.
# Thus, host-specific definitions should be at the beginning of the
# configuration file, and defaults at the end.

Host *
  Port {{ ssh_client__port }}
  AddressFamily any  
  Protocol 2

  Cipher 3des
{% set ssh_client__tpl_kex_algorithms = [] %}
{% set ssh_client__tpl_kex_algorithms_match = False %}
{% for key, value in ssh_client__kex_algorithms_map.iteritems() %}
{%   if not ssh_client__tpl_kex_algorithms_match and
      _ssh_client__version.stdout|d() and
      _ssh_client__version.stdout | version_compare(key, '>=') %}
{%   set ssh_client__tpl_kex_algorithms_match = True %}
{%     for element in value %}
{%       set _ = ssh_client__tpl_kex_algorithms.append(element) %}
{%     endfor %}
{%   endif %}
{% endfor %}
{% set ssh_client__tpl_kex_algorithms = (ssh_client__tpl_kex_algorithms + ssh_client__kex_algorithms_additional) | unique %}
{% if ssh_client__tpl_kex_algorithms and ssh_client__paranoid|bool %}
  KexAlgorithms {{ ([ ssh_client__tpl_kex_algorithms|first ] + ssh_client__kex_algorithms_additional) | unique | join(",") }}
{% elif ssh_client__tpl_kex_algorithms %}
  KexAlgorithms {{ ssh_client__tpl_kex_algorithms | join(",") }}
{% endif %}
{% set ssh_client__tpl_ciphers = [] %}
{% set ssh_client__tpl_ciphers_match = False %}
{% for key, value in ssh_client__ciphers_map.iteritems() %}
{%   if not ssh_client__tpl_ciphers_match and
        _ssh_client__version.stdout|d() and
        _ssh_client__version.stdout | version_compare(key, '>=') %}
{%     set ssh_client__tpl_ciphers_match = True %}
{%     for element in value %}
{%       set _ = ssh_client__tpl_ciphers.append(element) %}
{%     endfor %}
{%   endif %}
{% endfor %}
{% set ssh_client__tpl_ciphers = (ssh_client__tpl_ciphers + ssh_client__ciphers_additional) | unique %}
{% if ssh_client__tpl_ciphers and ssh_client__paranoid|bool %}
  Ciphers {{ ([ ssh_client__tpl_ciphers|first ] + ssh_client__ciphers_additional) | unique | join(",") }}
{% elif ssh_client__tpl_ciphers %}
  Ciphers {{ ssh_client__tpl_ciphers | join(",") }}
{% endif %}
{% set ssh_client__tpl_macs = [] %}
{% set ssh_client__tpl_macs_match = False %}
{% for key, value in ssh_client__macs_map.iteritems() %}
{%   if not ssh_client__tpl_macs_match and
        _ssh_client__version.stdout|d() and
        _ssh_client__version.stdout | version_compare(key, '>=') %}
{%     set ssh_client__tpl_macs_match = True %}
{%     for element in value %}
{%       set _ = ssh_client__tpl_macs.append(element) %}
{%     endfor %}
{%   endif %}
{% endfor %}
{% set ssh_client__tpl_macs = (ssh_client__tpl_macs + ssh_client__macs_additional) | unique %}
{% if ssh_client__tpl_macs and ssh_client__paranoid|bool %}
  MACs {{ ([ sshd__tpl_macs|first ] + ssh_client__macs_additional) | unique | join(",") }}
{% elif ssh_client__tpl_macs %}
  MACs {{ ssh_client__tpl_macs | join(",") }}
{% endif %}

  PasswordAuthentication {{ ssh_client__password_authentication if ssh_client__password_authentication is string else ssh_client__password_authentication | bool | ternary('yes', 'no')}}
  ChallengeResponseAuthentication no
  KbdInteractiveAuthentication {{ ssh_client__keyboardinteractive_authentication if ssh_client__keyboardinteractive_authentication is string else ssh_client__keyboardinteractive_authentication | bool | ternary('yes', 'no')}}
  PubkeyAuthentication {{ ssh_client__pubkey_authentication if ssh_client__pubkey_authentication is string else ssh_client__pubkey_authentication | bool | ternary('yes', 'no')}}
  GSSAPIAuthentication {{ ssh_client__gssapi_authentication if ssh_client__gssapi_authentication is string else ssh_client__gssapi_authentication | bool | ternary('yes', 'no')}}
{% if ssh_client__gssapi_authentication | bool %}
  GSSAPIDelegateCredentials no
  GSSAPIKeyExchange no
  GSSAPITrustDNS no
{% endif %}

  RSAAuthentication no
  RhostsRSAAuthentication no
  HostbasedAuthentication no

  HashKnownHosts yes

  SendEnv {{ (ssh_client__send_env | d([]) | list) | unique | join(" ") }}

  ForwardX11 {{ ssh_client__x11_forwarding }}

  GlobalKnownHostsFile {{ ssh_client__known_hosts if ssh_client__known_hosts is string else (ssh_client__known_hosts|d([])|list|join(' ')) }}
{% if ssh_client__proxy_command is defined %}
  ProxyCommand {{ ssh_client__proxy_command }}
{% endif %}

#   BatchMode no
#   CheckHostIP yes

#   ConnectTimeout 0
#   StrictHostKeyChecking ask


#   EscapeChar ~
#   Tunnel no
#   TunnelDevice any:any
#   PermitLocalCommand no
#   VisualHostKey no
#   ProxyCommand ssh -q -W %h:%p gateway.example.com
#   RekeyLimit 1G 1h
#
# Uncomment this if you want to use .local domain
# Host *.local
#   CheckHostIP no	
# If this option is set to yes then remote X11 clients will have full access
# to the original X11 display. As virtually no X11 client supports the untrusted
# mode correctly we set this to yes.
#	ForwardX11Trusted yes
